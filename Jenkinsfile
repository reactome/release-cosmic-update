// This Jenkinsfile is used by Jenkins to run the UpdateStableIdentifiers step of Reactome's release.
// It requires that the ConfirmReleaseConfigs step has been run successfully before it can be run.

import org.reactome.release.jenkins.utilities.Utilities

// Shared library maintained at 'release-jenkins-utils' repository.
def utils = new Utilities()

pipeline
{
	agent any

	environment {
		ECR_URL = 'public.ecr.aws/reactome/release-cosmic-update'
		CONT_NAME = 'cosmic_container'
		CONT_ROOT = '/opt/release-cosmic-update'
	}

	stages
	{
		// This stage checks that an upstream step, UniProt Update, was run successfully.
		stage('Check ConfirmReleaseConfigs succeeded')
		{
			steps
			{
				script
				{
					utils.checkUpstreamBuildsSucceeded("ConfirmReleaseConfigs")
				}
			}
		}

		/*
		// This stage backs up the gk_central database before it is modified.
		stage('Setup: Back up gk_central - pre-update')
		{
			steps
			{
				script
				{
					withCredentials([usernamePassword(credentialsId: 'mySQLCuratorUsernamePassword', passwordVariable: 'pass', usernameVariable: 'user')])
					{
						utils.takeDatabaseDumpAndGzip("${env.GK_CENTRAL_DB}", "cosmic-update", "before", "${env.CURATOR_SERVER}")
					}
				}
			}
		}
		*/
		// This stage makes the config/credentials file
		stage('Setup: Get config/credentials')
		{
			steps
			{
				script
				{
					withCredentials([file(credentialsId: 'Config', variable: 'ConfigFile')])
					{
						sh "mkdir -p config"
						sh "sudo cp $ConfigFile config/auth.properties"
						sh "sudo chown jenkins:jenkins config/ -R"
					}
				}
			}
		}
		// This stage pulls the docker image and removes old containers
		stage('Setup: Pull and clean docker environment')
		{
			steps
			{
				sh "docker pull ${ECR_URL}:latest"
				sh """
					if docker ps -a --format '{{.Names}}' | grep -Eq '${CONT_NAME}_download'; then
						docker rm -f ${CONT_NAME}_download
					fi
				"""
				sh """
					if docker ps -a --format '{{.Names}}' | grep -Eq '${CONT_NAME}'; then
						docker rm -f ${CONT_NAME}
					fi
				"""
			}
		}

		// Download the data files. Done as a separate step from the main program's execution so that if
		// the program fails, you don't get stuck waiting for a long download again. 
		stage('Main: Download COSMIC files')
		{
			steps
			{
				sh "mkdir -p cosmic-files"
				sh """\
					docker run -v \$(pwd)/config:${CONT_ROOT}/config -v \$(pwd)/cosmic-files:${CONT_ROOT}/cosmic-files --net=host --name ${CONT_NAME}_download \\
						${ECR_URL}:latest \\
						/bin/bash -c 'java -Xmx${env.JAVA_MEM_MAX}m -jar target/cosmic-update-*-jar-with-dependencies.jar -d PT72H -c config/auth.properties'
				"""
			}
		}
		// Run the COSMIC Update
		stage('Main: Run COSMIC updates')
		{
			steps
			{
				sh """\
					docker run -v \$(pwd)/config:${CONT_ROOT}/config -v \$(pwd)/cosmic-files:${CONT_ROOT}/cosmic-files --net=host --name ${CONT_NAME} \\
						${ECR_URL}:latest \\
						/bin/bash -c 'java -Xmx${env.JAVA_MEM_MAX}m -jar target/cosmic-update-*-jar-with-dependencies.jar -u -c config/auth.properties'
				"""
			}
		}

		// This stage backs up the gk_central database after modification.
		stage('POST: Backup gk_central - post-update')
		{
			steps
			{
				script
				{
					withCredentials([usernamePassword(credentialsId: 'mySQLCuratorUsernamePassword', passwordVariable: 'pass', usernameVariable: 'user')])
					{
						utils.takeDatabaseDumpAndGzip("${env.GK_CENTRAL_DB}", "cosmic-update", "after", "${env.CURATOR_SERVER}")
					}
				}
			}
		}
		// This stage archives the contents of the 'reports' folder generated by COSMIC Update and sends them in an email to the default recipients list.
		stage('Post: Email COSMIC Update Reports')
		{
			steps
			{
				script
				{
					def releaseVersion = utils.getReleaseVersion()

					sh "mkdir -p reports"
					sh "docker cp ${CONT_NAME}:${CONT_ROOT}/reports/. reports/"
					sh "tar -czf cosmic-update-v${releaseVersion}-reports.tgz reports/"
					
					emailext (
						body: "Hello,\n\nThis is an automated message from Jenkins regarding an update for v${releaseVersion}. The COSMIC Update step has completed. Please review the reports attached to this email. If they look correct, these reports need to be uploaded to the Reactome Drive at Reactome>Release>Release QA>V${releaseVersion}_QA>V${releaseVersion}_COSMIC_Update_Reports. The URL to the new V${releaseVersion}_COSMIC_Update_Reports folder also needs to be updated at https://devwiki.reactome.org/index.php/Reports_Archive under 'COSMIC Update Reports'. Please add the current COSMIC report wiki URL to the 'Archived reports' section of the page. If the reports don't look correct, please email the developer running Release. \n\nThanks!",
						to: '$DEFAULT_RECIPIENTS',
						from: "${env.JENKINS_RELEASE_EMAIL}",
						subject: "COSMIC Update Reports for v${releaseVersion}",
						attachmentsPattern: "**/cosmic-update-v${releaseVersion}-reports.tgz"
					)
				}
			}
		}
		// All databases, logs, and data files generated by this step are compressed before moving them to the Reactome S3 bucket. 
		// All files are then deleted.
		stage('Post: Archive Outputs')
		{
			steps
			{
				script
				{
					// data files are huge - do NOT archive them
					def dataFiles = []
					// log files are already in "logs" directory
					def logFiles = []
					// no directories need to be cleaned up
					def foldersToDelete = []
					utils.cleanUpAndArchiveBuildFiles("cosmic-update", dataFiles, logFiles, foldersToDelete)
				}
			}
		}
	}
}